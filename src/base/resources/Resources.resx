<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Arg_ArrayPlusOffTooSmall" xml:space="preserve">
    <value>Destination array is not long enough to copy all the items in the collection. Check array index and length.</value>
  </data>
  <data name="Arg_IndexOutOfRange" xml:space="preserve">
    <value>index is outside the range of valid indexes for array.</value>
  </data>
  <data name="Argument_AddingDuplicate" xml:space="preserve">
    <value>An entry with the same key already exists.</value>
  </data>
  <data name="Argument_ArrayPlusOffTooSmall" xml:space="preserve">
    <value>Attempting to specify count and offset past end of array.</value>
  </data>
  <data name="Argument_Empty" xml:space="preserve">
    <value>{0} is empty.</value>
  </data>
  <data name="Argument_InvalidOfLen" xml:space="preserve">
    <value>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</value>
  </data>
  <data name="ArgumentOutOfRange_Index" xml:space="preserve">
    <value>Index was out of range. Must be non-negative and less than the size of the collection.
</value>
  </data>
  <data name="Auth_Config_InvalidControlFlag" xml:space="preserve">
    <value>Invalid control flag</value>
  </data>
  <data name="Auth_Config_InvalidModuleType" xml:space="preserve">
    <value>Invalid system type</value>
  </data>
  <data name="Auth_Config_Missing_ControlFlag" xml:space="preserve">
    <value>Control flag was not defined</value>
  </data>
  <data name="Auth_Config_Missing_LoginModuleType" xml:space="preserve">
    <value>Type was not defined</value>
  </data>
  <data name="Auth_LoginMudule_Type" xml:space="preserve">
    <value>A instance of the login module type {0} could not be created.</value>
  </data>
  <data name="Caching_Invalid_expiration_combination" xml:space="preserve">
    <value>absoluteExpiration must be DateTime.MaxValue or slidingExpiration must be timeSpan.Zero.</value>
  </data>
  <data name="Config_ErrorAt" xml:space="preserve">
    <value>Configuration error at "{0}".</value>
  </data>
  <data name="Config_FileNotFound" xml:space="preserve">
    <value>Unable to find the specified configuration file.</value>
  </data>
  <data name="Config_FileNotFound_Path" xml:space="preserve">
    <value>Unable to find the file "{0}".</value>
  </data>
  <data name="Config_KeyNotFound" xml:space="preserve">
    <value>The configuration key "{0}" was not found.</value>
  </data>
  <data name="DataHelper_OrdArrInvalidOfLen" xml:space="preserve">
    <value>The number of specified fields is less than the number of columns.</value>
  </data>
  <data name="DataProvider_Connection" xml:space="preserve">
    <value>An IDbConnection instance could not be created. Verify if your connection string is valid and if your data source type was correctly specified.</value>
  </data>
  <data name="DataProvider_ConnectionString" xml:space="preserve">
    <value>An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.</value>
  </data>
  <data name="DataProvider_CreateInstance" xml:space="preserve">
    <value>Instance of the requested data provider could not be created. Check the constructor implied by the IDataProvider interface.</value>
  </data>
  <data name="DataProvider_InvalidProvider" xml:space="preserve">
    <value>The Provider is invalid.</value>
  </data>
  <data name="DataProvider_LoadAssembly" xml:space="preserve">
    <value>The assembly could not be loaded. {0}.</value>
  </data>
  <data name="DataProvider_Provider_Attributes" xml:space="preserve">
    <value>An invalid attributes collection has been supplied, or a required attribute has not been supplied.</value>
  </data>
  <data name="Generic_SyntaxError" xml:space="preserve">
    <value>Syntax error</value>
  </data>
  <data name="InvalidOperation_EmptyQueue" xml:space="preserve">
    <value>Queue empty</value>
  </data>
  <data name="InvalidOperation_FullQueue" xml:space="preserve">
    <value>Queue full</value>
  </data>
  <data name="JSON_BadRootElementType" xml:space="preserve">
    <value>Root value must be an array or object.</value>
  </data>
  <data name="JSON_InvalidEscape" xml:space="preserve">
    <value>Invalid escape sequence at "{0}".</value>
  </data>
  <data name="JSON_TooMuchNesting" xml:space="preserve">
    <value>Too much nesting.</value>
  </data>
  <data name="JSON_TrailingComma" xml:space="preserve">
    <value>Trailing comma not allowed at "{0}".</value>
  </data>
  <data name="JSON_UnexpectedDataAfterRoot" xml:space="preserve">
    <value>Unexpected data after root element.</value>
  </data>
  <data name="JSON_UnquotedDictionaryKey" xml:space="preserve">
    <value>Dictionary keys must be quoted at "{0}".</value>
  </data>
  <data name="Type_CreateInstanceOf" xml:space="preserve">
    <value>Instance of the requested type could not be created. Check the constructor implied by the {0}.</value>
  </data>
</root>